'''
class LinearRegressionScratch:
    def fit(self, X, y):
        X_with_intercept = np.column_stack([np.ones(len(X)), X])
        XTX = np.dot(X_with_intercept.T, X_with_intercept)
        XTX_inv = np.linalg.inv(XTX)
        XTy = np.dot(X_with_intercept.T, y)
        coefficients = np.dot(XTX_inv, XTy)
        self.intercept = coefficients[0]
        self.coefficients = coefficients[1:]
        
    def predict(self, X):
        return np.dot(X, self.coefficients) + self.intercept
    
    def r2_score(self, y_true, y_pred):
        ss_res = np.sum((y_true - y_pred) ** 2)
        ss_tot = np.sum((y_true - np.mean(y_true)) ** 2)
        return 1 - (ss_res / ss_tot)
    
    def mse(self, y_true, y_pred):
        return np.mean((y_true - y_pred) ** 2)
        
data = pd.read_csv("USA Housing Dataset_rsm.csv")

features = ['bedrooms', 'bathrooms', 'sqft_living', 'floors', 'waterfront', 'view', 'condition', 'yr_built']
X = data[features].values
y = data['price'].values


# Splitting of the data
split_point = int(len(X) * 0.8)
train_idx, test_idx = indices[:split_point], indices[split_point:]

X_train, X_test = X[train_idx], X[test_idx]
y_train, y_test = y[train_idx], y[test_idx]

model = LinearRegressionScratch()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# printingr^2 and root mean square
r2 = model.r2_score(y_test, y_pred)
rmse = np.sqrt(model.mse(y_test, y_pred))

print(f"R-squared Value: {r2:.4f}")
print(f"Root Mean Square Error: ${rmse:,.2f}")
'''
